{
  "C++ template for Leetcode": {
    "prefix": "lcc",
    "body": [
      "#include <bits/stdc++.h>",

      "using namespace std;",
     
      "template <typename T>",
      "void printArray(const vector<T> &arr);",
      "template <typename T>",
      "void print2DArray(const vector<vector<T>> &arr);",
      "template <typename T>",
      "void printSet(const set<T> &s);",
      "template <typename T>",
      "void printUnorderedSet(const unordered_set<T> &s);",
      "template <typename K, typename V>",
      "void printMap(const map<K, V> &m);",
      "template <typename K, typename V>",
      "void printUnorderedMap(const unordered_map<K, V> &m);",
      "template <typename K, typename V>",
      "void printPair(const pair<K, V> &p);",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "int method() {",
      "    ${1:start}",
      "    return 0;",
      "}",

      "",
      "int main() {",
      "    auto result = method();",
      "    // cout << result << endl;",



      "    // printArray(result);",
      "    // print2DArray(result);",
      "    return 0;",
      "}",

      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
       "template <typename T>",
      "void printArray(const vector<T>& arr) {",
      "    cout << \"[\";",
      "    for (size_t i = 0; i < arr.size(); ++i) {",
      "        cout << arr[i];",
      "        if (i != arr.size() - 1) cout << \", \";",
      "    }",
      "    cout << \"]\" << endl;",
      "}",
      "template <typename T>",
      "void print2DArray(const vector<vector<T>>& arr) {",
      "    cout << \"[\" << endl;",
      "    for (const auto& row : arr) {",
      "        cout << \"  [\";",
      "        for (size_t i = 0; i < row.size(); ++i) {",
      "            cout << row[i];",
      "            if (i != row.size() - 1) cout << \", \";",
      "        }",
      "        cout << \"]\" << endl;",
      "    }",
      "    cout << \"]\" << endl;",
      "}",
      "template <typename T>",
      "void printSet(const set<T>& s) {",
      "    cout << \"{\";",
      "    for (auto it = s.begin(); it != s.end(); ++it) {",
      "        cout << *it;",
      "        if (next(it) != s.end()) cout << \", \";",
      "    }",
      "    cout << \"}\" << endl;",
      "}",
      "template <typename T>",
      "void printUnorderedSet(const unordered_set<T>& s) {",
      "    cout << \"{\";",
      "    for (auto it = s.begin(); it != s.end(); ++it) {",
      "        cout << *it;",
      "        if (next(it) != s.end()) cout << \", \";",
      "    }",
      "    cout << \"}\" << endl;",
      "}",
      "template <typename K, typename V>",
      "void printMap(const map<K, V>& m) {",
      "    cout << \"{\";",
      "    for (auto it = m.begin(); it != m.end(); ++it) {",
      "        cout << it->first << \": \" << it->second;",
      "        if (next(it) != m.end()) cout << \", \";",
      "    }",
      "    cout << \"}\" << endl;",
      "}",
      "template <typename K, typename V>",
      "void printUnorderedMap(const unordered_map<K, V>& m) {",
      "    cout << \"{\";",
      "    for (auto it = m.begin(); it != m.end(); ++it) {",
      "        cout << it->first << \": \" << it->second;",
      "        if (next(it) != m.end()) cout << \", \";",
      "    }",
      "    cout << \"}\" << endl;",
      "}",
      "template<typename K, typename V>",
      "void printPair(const pair<K, V>& p) {",
      "    cout << \"{\" << p.first << \", \" << p.second <<\"}\" << endl;",
      "}",
      "template <typename T>",
      "void printDeque(const deque<T>& dq) {",
      "    cout << \"Deque (front -> back): [\";",
      "    for (size_t i = 0; i < dq.size(); ++i) {",
      "        cout << dq[i];",
      "        if (i != dq.size() - 1) cout << \", \";",
      "    }",
      "    cout << \"]\" << endl;",
      "}",
    ],
    "description": "C++ base template for Leetcode"
  }
}
